version: '2'

services:

# Hadoop cluster
  namenode:
    image: bde2020/hadoop-namenode:1.1.0-hadoop2.7.1-java8
    container_name: namenode
    ports:
     - "8020:8020"
    networks: 
     - hdfs-network
    volumes:
     - hadoop_namenode:/hadoop/dfs/name
    environment:
     - CLUSTER_NAME=test
    env_file:
     - ./hadoop.env
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:1.1.0-hadoop2.7.1-java8
    container_name: resourcemanager
    networks: 
     - hdfs-network
    depends_on:
     - namenode
     - datanode1
     - datanode2
    env_file:
     - ./hadoop.env
  
  historyserver:
    image: bde2020/hadoop-historyserver:1.1.0-hadoop2.7.1-java8
    container_name: historyserver
    networks: 
     - hdfs-network
    depends_on:
     - namenode
     - datanode1
     - datanode2
    volumes:
     - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
     - ./hadoop.env
  
  nodemanager1:
    image: bde2020/hadoop-nodemanager:1.1.0-hadoop2.7.1-java8
    container_name: nodemanager1
    networks: 
     - hdfs-network
    depends_on:
     - namenode
     - datanode1
     - datanode2
    env_file:
     - ./hadoop.env
  
  datanode1:
    image: bde2020/hadoop-datanode:1.1.0-hadoop2.7.1-java8
    container_name: datanode1
    networks: 
     - hdfs-network
    depends_on:
     - namenode
    volumes:
     - hadoop_datanode1:/hadoop/dfs/data
    env_file:
     - ./hadoop.env
  
  datanode2:
    image: bde2020/hadoop-datanode:1.1.0-hadoop2.7.1-java8
    container_name: datanode2
    networks: 
     - hdfs-network
    depends_on:
     - namenode
    volumes:
     - hadoop_datanode2:/hadoop/dfs/data
    env_file:
     - ./hadoop.env
  
  datanode3:
    image: bde2020/hadoop-datanode:1.1.0-hadoop2.7.1-java8
    container_name: datanode3
    networks: 
     - hdfs-network
    depends_on:
     - namenode
    volumes:
     - hadoop_datanode3:/hadoop/dfs/data
    env_file:
     - ./hadoop.env

# Ingestion layer
  # Kafka
  zookeeper:
    image: wurstmeister/zookeeper:latest
    networks: 
     - kafka-network
    ports:
     - "2182:2181"

  kafka:
    image: wurstmeister/kafka:latest
    depends_on:
     - zookeeper
    networks: 
     - kafka-network
    ports:
     - "9092:9092"
     - "29092:29092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock

  data-generator:
    build: ./data-generator
    container_name: data-generator.sensors
    networks: 
     - kafka-network
    depends_on:
     - kafka
    environment:
      KAFKA_BROKER_URL: kafka:9092
      TOPIC: queueing.sensors
      DATA_PER_SECOND: 0.3

  # Flume  
  data-ingestion:
    build: ./data-ingestion
    container_name: flume.sensors
    networks: 
     - kafka-network
     - hdfs-network
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPICS: queueing.sensors
      HDFS_PATH: hdfs://namenode:8020/user/data/sensors
      AGENT: agent
    volumes:
      - ${PWD}/data-ingestion/kafkaFlume.properties:/apache-flume/conf/flume-conf.properties

# Spark batch layer
  spark-master-hadoop:
    build: ./batch-data-processing
    command: start-spark master
    hostname: spark-master-hadoop
    networks: 
     - hdfs-network
    ports:
      - "6067:6066"
      - "7078:7077"
      - "8081:8080"
      - "8889:8888"
    environment:
      HDFS_PATH: hdfs://namenode:8020/user/data/sensors
    volumes:
      - ./batch-data-processing/core-site.xml:/home/hadoop/hadoop/etc/hadoop/core-site.xml
      - ./batch-data-processing/jupyter_notebook_config.py:/root/.jupyter/jupyter_notebook_config.py

  spark-worker-hadoop:
    build: ./batch-data-processing
    command: start-spark worker spark-master-hadoop
    networks: 
     - hdfs-network
    environment:
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 2g
    links:
      - spark-master-hadoop

# Spark speed layer
  spark-master:
    build: ./stream-data-processing
    command: start-spark master
    hostname: spark-master
    networks: 
     - kafka-network
     - serv-network
    ports:
      - "6066:6066"
      - "7077:7077"
      - "8080:8080"
      - "8888:8888"
    environment:
      KAFKA_BROKER_URL: kafka:9092
      TOPIC: queueing.sensors
      ZOOKEEPER_URL: zookeeper:2181
      OPENTSDB_URL: opentsdb:4242
    volumes:
      - ./batch-data-processing/jupyter_notebook_config.py:/root/.jupyter/jupyter_notebook_config.py

  spark-worker:
    build: ./stream-data-processing
    command: start-spark worker spark-master
    networks: 
      - kafka-network
    environment:
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 2g
    links:
      - spark-master

# OpenTSDB, serving layer
  opentsdb:
    image: petergrace/opentsdb-docker:latest
    depends_on: 
      - namenode
    environment:
      - WAITSECS=30
    networks: 
     - hdfs-network
     - serv-network
    ports:
      - '4242:4242'
      - '60030:60030'
    volumes:  
      - "./data-serving/hbase-site.xml:/opt/hbase/conf/hbase-site.xml"
      - "./data-serving/opentsdb.conf:/etc/opentsdb/opentsdb.conf"
        
# Dashboard
  grafana:
    image: grafana/grafana
    user: "root"  
    networks:
      - serv-network
    ports:
      - '3000:3000'
    volumes:
      - ./grafana-storage:/var/lib/grafana
        
# Conf
volumes:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_datanode3:
  hadoop_historyserver:

networks:
  kafka-network:
  hdfs-network:
  serv-network:
